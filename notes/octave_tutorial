---------------------------------------------------
OCTAVE TUTORIAL
---------------------------------------------------

- Operators

    Math: + - * / ^
    Logical: == ~= && || xor(1, 0)
    Comment %

    % Brings up documents
    help eye


- Variables

    a = 3
    b = 'Hi'

    % Semicolon supresses output
    a = 3;

    % Comma chaining function calls
    a = 1, b = 2, c = 3

    % 'disp' will print formatted output
    disp(sprintf('2 decimals: %0.2f', a))

    % Change globally to long or short display format
    format long
    format short

    % Display all variables currently in scope
    who
    whos   % With details

    % Delete a variable
    clear featureX


- Matrices

    % 2x3 Matrix
    A = [1 2; 3 4; 5 6]

    % 3x1 Vector
    v = [1; 2; 3]

    % Create vector by stepping (inclusive)
    v = 1:0.1:2
    v = 1:6

    % Matrix of zeros or ones
    zeros(1, 3)
    ones(2, 3)

    % Identity matrix
    eye(4)

    % Matrix of uniform random numbers
    rand(3, 3)

    % Matrix of gaussian random numbers
    randn(3, 3)

    % The 'size' operator returns a 1x2 matrix
    sz = size(A)
    size(A, 1) % Row count
    size(A, 2) % Column count

    % Length of a vector
    length(v)


- Shell Commands

    pwd
    ls
    cd 'C:\Users\Desktop'


- Loading Data

    % Load Data File
    load featuresX.dat

    % Now, the data is available
    size(featuresX)   

    % v is first 10 elements of priceY
    % Note that MATLAB vectors are 1-indexed
    v = priceY(1:10)

    % Save a variable in a file
    save hello.mat v;

    % Save as a text file
    save hello.txt v -ascii


- Manipulating Data

    A = [1 2; 3 4; 5 6]

    % Indexing
    A(3, 2)
    A(3, :)        % Entire 3rd row
    A(:, 2)        % Entire 2nd column
    A([1, 3], :)   % First and third rows

    % Can use same operators for assignment
    A(:, 2) = [10: 11: 12]

    % Add another column to matrix
    A = [A, [100; 101; 102]]

    % Put all elements of A into a single column vector
    A(:)

    % Concatenate 2 matrices
    C = [A B]
    C = [A, B]


- Computing On Data

    % Define a few matrices
    A = [1 2; 3 4; 5 6]
    B = [11 12; 13 14; 15 16]
    C = [1 1; 2 2]

    % Multipy 2 matrices
    A * C

    % Element-wise multiplication
    A .* B

    % Other Element-wise operations
    A .^ 2
    1 ./ A
    log(v)
    exp(v)
    abs(v)
    -v

    % Increment all the values in v
    v + ones(length(v), 1)
    v + 1

    % Transpose of a matrix
    A'

    % Maximum value
    a = [1 15 2 0.5]
    val = max(a)
    [val, ind] = max(a)   % ind is index

    % Boolean mask
    a < 3
    % Returns: 
    1 0 1 1

    % Apply mask
    find(a < 3)
    % Returns:
    1 3 4

    % Find rows and columns of matching elements
    [r, c] = find(A >= 7)

    % Magic square, where rows, columns, diagonals all sum to same number
    A = magic(3)

    % Sum and product of all elements
    sum(a)
    prod(a)

    % Ceiling and floor of all elements
    floor(a)
    ceil(a)

    % Element-wise max
    max(rand(3), rand(3))

    % Column-wise max
    max(A, [], 1)

    % Row-wise max
    max(A, [], 2)

    % Max value of entire matrix
    max(max(A))
    max(A(:))

    % Column-wise sum
    sum(A, 1)

    % Row-wise sum
    sum(A, 2)

    % Inverse of a matrix
    pinv(A)


- Plotting

    % Draws histogram of w
    w = -6 + sqrt(10) * (randn(1, 10000))
    hist(w)

    % Histogram with 50 buckets
    hist(w, 50)


    % Plot a sine function
    t = [0: 0.01: 0.98];
    y1 = sin(2*pi*4*t);
    plot(t, y1);

    % Plot a cosine function on the same graph
    hold on;     % Causes same graph to be used
    y2 = cos(2*pi*4*t);
    plot(t, y2, 'r');    % 'r' for red color

    % Add a legend and title
    legend('sin', 'cos')
    title('my plot')

    % Save the graph
    print -dpng 'myPlot.png'

    % Close the graph
    close


    % Open 2 graphs simultaneously
    figure(1); plot(t, y1);
    figure(2); plot(t, y2);

    % Creates subplots on figure
    subplot(1, 2, 1);     % Create 1x2 plot and access 1st element
    plot(t, y1);          % Plots in first element
    subplot(1, 2, 2);     % Access 2nd element
    plot(t, y2);          % Plots in 2nd element

    % Set axes
    axis([0.5 1 -1 1])    % xrange is 0.5 to 1, yrange is -1 to 1

    % Clear a figure
    clf;


- Control Statements

    v = zeros(10, 1)

    % For loop
    for i = 1:10,
        v(i) = 2^i;
    end;


    % While loop
    i = 1;
    while i <= 5,
        v(i) = 100;
        i = i+1;
    end;


    % If statement
    i = 1;
    while true,
        v(i) = 999;
        i = i+1;
        if i == 6,
            break;
        end;
    end;

    % If/elseif/else statement
    if v(1) == 1,
        disp('The value is one');
    elseif v(1) == 2,
        disp('The value is two');
    else
        disp('The value isn't one or two);
    end;


    % Define a function in a file (and navigate to the directory its in)
    % y is the output
    % x is the parameter
    function y = squareThisNumber(x)
    y = x^2;

    % Now call it
    squareThisNumber(5);


    % Multiple return values
    function [y1, y2] = squareAndCubeThisNumber(x)
    y1 = x^2;
    y2 = x^3;

    % Call it
    [a, b] = squareAndCubeThisNumber(5);


- Vectorization

    % theta is vector [theta-0, theta-1, ..., theta-n]
    % x is vector [x-0, x-1, ..., x-n]
    % prediction is h0(x)

    % Unvectorized implementation to compute h0(x)
    prediction = 0.0;
    for j = 1:n+1,
        prediction = prediction + theta(j) * x(j)
    end;

    % Vectorized implementation to compute h0(x)
    prediction = theta' * x;


- Vectorized Implementation of Gradient Descent

    